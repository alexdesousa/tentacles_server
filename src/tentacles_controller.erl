-module(tentacles_controller).

-behaviour(gen_server).

% Public API.
-export([start_link/2, start_link/3, send_sync/3, send_async/3, send_event/2]).

% Callbacks.
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2,
         code_change/3]).

%-------------------------------------------------------------------------------
% Types
%-------------------------------------------------------------------------------

-type arguments() :: list(term()).
%% Arguments for the controller.

-type server_name() :: module()
                     | {local, Name :: atom()}
                     | {global, GlobalName :: term()}
                     | {via, module(), ViaName :: term()}.
%% Server name.

-type controller_state() :: term().
%% Controller state.

-type message() :: term().
%% Message received by tentacles_controller.

-type response() :: {error, timeout}
                  | {error, unavailable}
                  | {error, unknown}
                  | term().
%% Response generated by the controller.

-type termination_reason() :: normal
                            | shutdown
                            | {shutdown, term()}
                            | term().
%% Termination reason.

-type event() :: term().
%% Event.

-type millisecs() :: non_neg_integer().
%% Milliseconds.

-type max_age() :: infinity
                 | millisecs().
%% Max age.

-type sender() :: {pid(), term()}.
%% Message sender.

-type replies() :: {reply, response(), controller_state()}
                 | {noreply, controller_state()}
                 | {stop, termination_reason(), response(), controller_state()}
                 | {stop, termination_reason(), controller_state()}.
%% Posible replies for the controller.

-type real_replies() :: replies()
                      | {reply, response(), controller_state(), millisecs()}
                      | {noreply, controller_state(), millisecs()}.
%% Real replies.

%% @doc tentacles_controller behavior internal state.
-record(state, { module             :: module()
               , max_age = infinity :: max_age()
               , controller_state   :: controller_state()
               }).

%-------------------------------------------------------------------------------
% tentacles_controller behavior definitions.
%-------------------------------------------------------------------------------

%% @doc Callback to initialize the controller.
-callback init(Args :: list(term())) ->
                  {ok, controller_state()}
                | {ok, controller_state(), max_age()}.

%% @doc Callback to handle a message.
-callback handle_message(message(), controller_state()) ->
                  {reply, response(), controller_state()}
                | {noreply, controller_state()}
                | {stop, termination_reason(), response(), controller_state()}
                | {stop, termination_reason(), controller_state()}.

%% @doc Callback to handle timeouts.
-callback handle_timeout(controller_state()) ->
                  {noreply, controller_state()}
                | {stop, termination_reason(), controller_state()}.

%% @doc Callback to handle events.
-callback handle_event(event(), controller_state()) ->
                  {noreply, controller_state()}
                | {stop, termination_reason(), controller_state()}.

%% @doc Callback to handle termination.
-callback handle_termination(termination_reason(), controller_state) -> term().

%-------------------------------------------------------------------------------
% Public functions.
%-------------------------------------------------------------------------------

-spec start_link(module(), arguments()) -> {ok, pid()}
                                         | ignore
                                         | {error, term()}.
%% @doc Initializes the tentacles_controller.
start_link(Module, Args) ->
    start_link(Module, Module, Args).

-spec start_link(server_name(), module(), arguments()) -> {ok, pid()}
                                                        | ignore
                                                        | {error, term()}.
%% @doc Initializes the tentacles_controller.
start_link(ServerName, Module, Args) ->
    case gen_server:start_link(ServerName, [Module, Args], []) of
        {error, {already_started, Pid}} ->
            {ok, Pid};
        Else ->
            Else
    end.

-spec send_sync(server_name() | pid(), message(), timeout()) -> response().
%% @doc Sends synchronous message to the controller.
send_sync(Handler, Msg, Timeout) ->
    try
        gen_server:call(Handler, Msg, Timeout)
    catch
        exit:{timeout, _} -> {error, timeout};
        exit:{noproc, _}  -> {error, unavailable};
        _:_               -> {error, unknown}
    end.
    
-spec send_async(server_name() | pid(), sender(), message()) -> ok.
%% @doc Sends asynchronous message to the controller.
send_async(Handler, From, Msg) ->
    gen_server:cast(Handler, {From, Msg}).

-spec send_event(server_name() | pid(), event()) -> ok.
%% @doc Sends remote event to server.
send_event(Handler, Event) ->
    gen_server:cast(Handler, {'event', Event}).

%-------------------------------------------------------------------------------
% gen_server behavior callbacks.
%-------------------------------------------------------------------------------

%% @doc Initializes the gen_server state.
init([Module, Args]) ->
    case Module:init(Args) of
        {ok, ControllerState} ->
            State = #state{ module           = Module
                          , controller_state = ControllerState},
            {ok, State};
        {ok, ControllerState, infinity} ->
            State = #state{ module           = Module
                          , controller_state = ControllerState},
            {ok, State};
        {ok, ControllerState, MaxAge} ->
            State = #state{ module           = Module
                          , max_age          = MaxAge
                          , controller_state = ControllerState},
            {ok, State, MaxAge}
    end.

% Synchronous calls.
handle_call(Msg, _From, State) ->
    Module   = State#state.module,
    ControllerState = State#state.controller_state,
    Response = Module:handle_message(Msg, ControllerState),
    sync_result(Response, State).

% Asyncronous calls treated as events.
handle_cast({'event', Event}, State) ->
    Module          = State#state.module,
    ControllerState = State#state.controller_state,
    Response        = Module:handle_event(Event, ControllerState),
    sync_result(Response, State);

% Asynchronous calls.
handle_cast({From, Msg}, State) ->
    Module   = State#state.module,
    ControllerState = State#state.controller_state,
    Response = Module:handle_message(Msg, ControllerState),
    async_result(From, Response, State);

% Ignore the rest.
handle_cast(_Msg, State) ->
    {noreply, State}.

% Timeouts.
handle_info(timeout, State) ->
    Module          = State#state.module,
    ControllerState = State#state.controller_state,
    Response        = Module:handle_timeout(ControllerState),
    sync_result(Response, State);

% Other events.
handle_info(Event, State) ->
    Module          = State#state.module,
    ControllerState = State#state.controller_state,
    Response        = Module:handle_event(Event, ControllerState),
    sync_result(Response, State).

% Termination.
terminate(Reason, State) ->
    Module          = State#state.module,
    ControllerState = State#state.controller_state,
    Module:terminate(Reason, ControllerState).

% Code change.
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%-------------------------------------------------------------------------------
% Helper functions
%-------------------------------------------------------------------------------

-spec result( {reply, response(), controller_state()}
            , #state{}
            , infinity) -> {reply, response(), #state{}};
            
            ( {reply, response(), controller_state()}
            , #state{}
            , millisecs()) -> {reply, response(), #state{}, millisecs()};
                                  
            ( {noreply, controller_state()}
            , #state{}
            , infinity) -> {noreply, #state{}};
            
            ( {noreply, controller_state()}
            , #state{}
            , millisecs()) -> {noreply, #state{}, millisecs()};
                                  
            ( {stop, termination_reason(), response(), controller_state()}
            , #state{}
            , any()) -> {stop, termination_reason(), response(), #state{}};
            
            ( {stop, termination_reason(), controller_state()}
            , #state{}
            , any()) -> {stop, termination_reason(), #state{}}.
%% @doc Converts result from the tentacle_controller to a gen_server
%%      callback response.
result({reply, Response, ControllerState}, State, infinity) ->
    NewState = State#state{controller_state = ControllerState},
    {reply, Response, NewState};

result({reply, Response, ControllerState}, State, MaxAge) ->
    NewState = State#state{controller_state = ControllerState},
    {reply, Response, NewState, MaxAge};

result({noreply, ControllerState}, State, infinity) ->
    NewState = State#state{controller_state = ControllerState},
    {noreply, NewState};

result({noreply, ControllerState}, State, MaxAge) ->
    NewState = State#state{controller_state = ControllerState},
    {noreply, NewState, MaxAge};

result({stop, Reason, Response, ControllerState}, State, _MaxAge) ->
    NewState = State#state{controller_state = ControllerState},
    {stop, Reason, Response, NewState};

result({stop, Reason, ControllerState}, State, _MaxAge) ->
    NewState = State#state{controller_state = ControllerState},
    {stop, Reason, NewState}.

-spec build_result(sender() | none, replies(), #state{}) -> real_replies().
%% @doc Builds result depending if the request was syncronous or asyncronous.
build_result(none, Reply, State) ->
    result(Reply, State, State#state.max_age);
build_result(From, {reply, Reply, ControllerState}, State) ->
    gen_server:reply(From, Reply),
    result({noreply, ControllerState}, State, State#state.max_age);
build_result(From, {stop, Reason, Reply, ControllerState}, State) ->
    gen_server:reply(From, Reply),
    result({stop, Reason, ControllerState}, State, State#state.max_age);
build_result(_From, Reply, State) ->
    result(Reply, State, State#state.max_age).

-spec async_result(sender(), replies(), #state{}) -> real_replies().
%% @doc Builds the result for asyncronous requests.
async_result(From, Reply, State) ->
    build_result(From, Reply, State).

-spec sync_result(response(), #state{}) -> real_replies().
%% @doc Builds the result for syncronous requests.
sync_result(Reply, State) ->
    build_result(none, Reply, State).
